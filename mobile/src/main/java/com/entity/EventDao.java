package com.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.entity.Event;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table EVENT.
*/
public class EventDao extends AbstractDao<Event, Long> {

    public static final String TABLENAME = "EVENT";

    /**
     * Properties of entity Event.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Oid = new Property(1, String.class, "oid", false, "OID");
        public final static Property TargetTime = new Property(2, String.class, "targetTime", false, "TARGET_TIME");
        public final static Property Content = new Property(3, String.class, "content", false, "CONTENT");
        public final static Property NotifyTime = new Property(4, String.class, "notifyTime", false, "NOTIFY_TIME");
        public final static Property Mode = new Property(5, String.class, "mode", false, "MODE");
        public final static Property Status = new Property(6, String.class, "status", false, "STATUS");
    };


    public EventDao(DaoConfig config) {
        super(config);
    }
    
    public EventDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'EVENT' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'OID' TEXT," + // 1: oid
                "'TARGET_TIME' TEXT," + // 2: targetTime
                "'CONTENT' TEXT," + // 3: content
                "'NOTIFY_TIME' TEXT," + // 4: notifyTime
                "'MODE' TEXT," + // 5: mode
                "'STATUS' TEXT);"); // 6: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'EVENT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Event entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String oid = entity.getOid();
        if (oid != null) {
            stmt.bindString(2, oid);
        }
 
        String targetTime = entity.getTargetTime();
        if (targetTime != null) {
            stmt.bindString(3, targetTime);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
 
        String notifyTime = entity.getNotifyTime();
        if (notifyTime != null) {
            stmt.bindString(5, notifyTime);
        }
 
        String mode = entity.getMode();
        if (mode != null) {
            stmt.bindString(6, mode);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(7, status);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Event readEntity(Cursor cursor, int offset) {
        Event entity = new Event( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // oid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // targetTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // content
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // notifyTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // mode
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // status
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Event entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTargetTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setContent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNotifyTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMode(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStatus(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Event entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Event entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
